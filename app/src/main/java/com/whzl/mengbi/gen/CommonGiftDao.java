package com.whzl.mengbi.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whzl.mengbi.greendao.CommonGift_Converter;
import java.util.List;

import com.whzl.mengbi.greendao.CommonGift;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMON_GIFT".
*/
public class CommonGiftDao extends AbstractDao<CommonGift, Long> {

    public static final String TABLENAME = "COMMON_GIFT";

    /**
     * Properties of entity CommonGift.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property HobbyList = new Property(1, String.class, "hobbyList", false, "HOBBY_LIST");
    }

    private final CommonGift_Converter hobbyListConverter = new CommonGift_Converter();

    public CommonGiftDao(DaoConfig config) {
        super(config);
    }
    
    public CommonGiftDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMON_GIFT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: userId
                "\"HOBBY_LIST\" TEXT);"); // 1: hobbyList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMON_GIFT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommonGift entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        List hobbyList = entity.getHobbyList();
        if (hobbyList != null) {
            stmt.bindString(2, hobbyListConverter.convertToDatabaseValue(hobbyList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommonGift entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        List hobbyList = entity.getHobbyList();
        if (hobbyList != null) {
            stmt.bindString(2, hobbyListConverter.convertToDatabaseValue(hobbyList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommonGift readEntity(Cursor cursor, int offset) {
        CommonGift entity = new CommonGift( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : hobbyListConverter.convertToEntityProperty(cursor.getString(offset + 1)) // hobbyList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommonGift entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHobbyList(cursor.isNull(offset + 1) ? null : hobbyListConverter.convertToEntityProperty(cursor.getString(offset + 1)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommonGift entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommonGift entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommonGift entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
