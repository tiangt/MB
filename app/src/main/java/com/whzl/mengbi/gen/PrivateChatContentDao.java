package com.whzl.mengbi.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.whzl.mengbi.greendao.PrivateChatContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRIVATE_CHAT_CONTENT".
*/
public class PrivateChatContentDao extends AbstractDao<PrivateChatContent, Long> {

    public static final String TABLENAME = "PRIVATE_CHAT_CONTENT";

    /**
     * Properties of entity PrivateChatContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Timestamp = new Property(2, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property FromId = new Property(3, Long.class, "fromId", false, "FROM_ID");
        public final static Property PrivateUserId = new Property(4, Long.class, "privateUserId", false, "PRIVATE_USER_ID");
    }

    private Query<PrivateChatContent> privateChatUser_PrivateChatContentsQuery;

    public PrivateChatContentDao(DaoConfig config) {
        super(config);
    }
    
    public PrivateChatContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRIVATE_CHAT_CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"TIMESTAMP\" INTEGER," + // 2: timestamp
                "\"FROM_ID\" INTEGER," + // 3: fromId
                "\"PRIVATE_USER_ID\" INTEGER);"); // 4: privateUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRIVATE_CHAT_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrivateChatContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        Long fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindLong(4, fromId);
        }
 
        Long privateUserId = entity.getPrivateUserId();
        if (privateUserId != null) {
            stmt.bindLong(5, privateUserId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrivateChatContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(3, timestamp);
        }
 
        Long fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindLong(4, fromId);
        }
 
        Long privateUserId = entity.getPrivateUserId();
        if (privateUserId != null) {
            stmt.bindLong(5, privateUserId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrivateChatContent readEntity(Cursor cursor, int offset) {
        PrivateChatContent entity = new PrivateChatContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // timestamp
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // fromId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // privateUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrivateChatContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFromId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPrivateUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrivateChatContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrivateChatContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrivateChatContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "privateChatContents" to-many relationship of PrivateChatUser. */
    public List<PrivateChatContent> _queryPrivateChatUser_PrivateChatContents(Long privateUserId) {
        synchronized (this) {
            if (privateChatUser_PrivateChatContentsQuery == null) {
                QueryBuilder<PrivateChatContent> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PrivateUserId.eq(null));
                privateChatUser_PrivateChatContentsQuery = queryBuilder.build();
            }
        }
        Query<PrivateChatContent> query = privateChatUser_PrivateChatContentsQuery.forCurrentThread();
        query.setParameter(0, privateUserId);
        return query.list();
    }

}
