package com.whzl.mengbi.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.whzl.mengbi.greendao.PrivateChatUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRIVATE_CHAT_USER".
*/
public class PrivateChatUserDao extends AbstractDao<PrivateChatUser, Long> {

    public static final String TABLENAME = "PRIVATE_CHAT_USER";

    /**
     * Properties of entity PrivateChatUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PrivateUserId = new Property(1, Long.class, "privateUserId", false, "PRIVATE_USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Timestamp = new Property(4, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property UncheckTime = new Property(5, Long.class, "uncheckTime", false, "UNCHECK_TIME");
        public final static Property UserId = new Property(6, Long.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<PrivateChatUser> user_PrivateChatUserListQuery;

    public PrivateChatUserDao(DaoConfig config) {
        super(config);
    }
    
    public PrivateChatUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRIVATE_CHAT_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRIVATE_USER_ID\" INTEGER," + // 1: privateUserId
                "\"NAME\" TEXT," + // 2: name
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"TIMESTAMP\" INTEGER," + // 4: timestamp
                "\"UNCHECK_TIME\" INTEGER," + // 5: uncheckTime
                "\"USER_ID\" INTEGER);"); // 6: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRIVATE_CHAT_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrivateChatUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long privateUserId = entity.getPrivateUserId();
        if (privateUserId != null) {
            stmt.bindLong(2, privateUserId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
 
        Long uncheckTime = entity.getUncheckTime();
        if (uncheckTime != null) {
            stmt.bindLong(6, uncheckTime);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrivateChatUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long privateUserId = entity.getPrivateUserId();
        if (privateUserId != null) {
            stmt.bindLong(2, privateUserId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
 
        Long uncheckTime = entity.getUncheckTime();
        if (uncheckTime != null) {
            stmt.bindLong(6, uncheckTime);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(7, userId);
        }
    }

    @Override
    protected final void attachEntity(PrivateChatUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrivateChatUser readEntity(Cursor cursor, int offset) {
        PrivateChatUser entity = new PrivateChatUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // privateUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // timestamp
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // uncheckTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrivateChatUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrivateUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUncheckTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrivateChatUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrivateChatUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrivateChatUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "privateChatUserList" to-many relationship of User. */
    public List<PrivateChatUser> _queryUser_PrivateChatUserList(Long userId) {
        synchronized (this) {
            if (user_PrivateChatUserListQuery == null) {
                QueryBuilder<PrivateChatUser> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_PrivateChatUserListQuery = queryBuilder.build();
            }
        }
        Query<PrivateChatUser> query = user_PrivateChatUserListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
